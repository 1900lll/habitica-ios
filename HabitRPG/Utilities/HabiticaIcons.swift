//
//  HabiticaIcons.swift
//  Habitica
//
//  Created by Phillip Thelen on 28.08.17.
//  Copyright Â© 2017 HabitRPG Inc.. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class HabiticaIcons : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfExperience: UIImage?
        static var experienceTargets: [AnyObject]?
        static var imageOfMagic: UIImage?
        static var magicTargets: [AnyObject]?
        static var imageOfGold: UIImage?
        static var goldTargets: [AnyObject]?
        static var imageOfGem: UIImage?
        static var gemTargets: [AnyObject]?
        static var imageOfHourglass: UIImage?
        static var hourglassTargets: [AnyObject]?
        static var imageOfExperienceReward: UIImage?
        static var experienceRewardTargets: [AnyObject]?
        static var imageOfGoldReward: UIImage?
        static var goldRewardTargets: [AnyObject]?
        static var imageOfHeartDarkBg: UIImage?
        static var heartDarkBgTargets: [AnyObject]?
        static var imageOfHeartLightBg: UIImage?
        static var heartLightBgTargets: [AnyObject]?
        static var imageOfWarrior: UIImage?
        static var warriorTargets: [AnyObject]?
        static var imageOfHeartLarge: UIImage?
        static var heartLargeTargets: [AnyObject]?
    }

    //// Drawing Methods

    @objc dynamic public class func drawHeart(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit, darkBackground: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)


        //// Color Declarations
        let heartLightBackground = UIColor(red: 0.969, green: 0.306, blue: 0.322, alpha: 1.000)
        let fillColor2 = UIColor(red: 1.000, green: 0.380, blue: 0.396, alpha: 1.000)
        let fillColor3 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.500)
        let fillColor4 = UIColor(red: 0.710, green: 0.141, blue: 0.157, alpha: 0.350)
        let fillColor5 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.250)
        let fillColor6 = UIColor(red: 0.710, green: 0.141, blue: 0.157, alpha: 0.500)
        let heartDarkBackground = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.698)

        //// Variable Declarations
        let expression = darkBackground ? heartDarkBackground : heartLightBackground

        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 2, y: 3.75))
        bezierPath.addLine(to: CGPoint(x: 4.92, y: 2))
        bezierPath.addLine(to: CGPoint(x: 9, y: 4.22))
        bezierPath.addLine(to: CGPoint(x: 13.08, y: 2))
        bezierPath.addLine(to: CGPoint(x: 16, y: 3.75))
        bezierPath.addLine(to: CGPoint(x: 16, y: 9))
        bezierPath.addLine(to: CGPoint(x: 13.08, y: 13.08))
        bezierPath.addLine(to: CGPoint(x: 9, y: 16))
        bezierPath.addLine(to: CGPoint(x: 4.92, y: 13.08))
        bezierPath.addLine(to: CGPoint(x: 2, y: 9))
        bezierPath.addLine(to: CGPoint(x: 2, y: 3.75))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        expression.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 5.73, y: 12.27))
        bezier2Path.addLine(to: CGPoint(x: 3.17, y: 8.65))
        bezier2Path.addLine(to: CGPoint(x: 3.17, y: 4.39))
        bezier2Path.addLine(to: CGPoint(x: 4.92, y: 3.34))
        bezier2Path.addLine(to: CGPoint(x: 9, y: 5.56))
        bezier2Path.addLine(to: CGPoint(x: 13.08, y: 3.34))
        bezier2Path.addLine(to: CGPoint(x: 14.83, y: 4.39))
        bezier2Path.addLine(to: CGPoint(x: 14.83, y: 8.65))
        bezier2Path.addLine(to: CGPoint(x: 12.27, y: 12.27))
        bezier2Path.addLine(to: CGPoint(x: 9, y: 14.54))
        bezier2Path.addLine(to: CGPoint(x: 5.73, y: 12.27))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        fillColor2.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 9, y: 10.46))
        bezier3Path.addLine(to: CGPoint(x: 12.27, y: 12.27))
        bezier3Path.addLine(to: CGPoint(x: 9, y: 14.54))
        bezier3Path.addLine(to: CGPoint(x: 9, y: 10.46))
        bezier3Path.close()
        bezier3Path.usesEvenOddFillRule = true
        fillColor3.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 9, y: 10.46))
        bezier4Path.addLine(to: CGPoint(x: 5.73, y: 12.27))
        bezier4Path.addLine(to: CGPoint(x: 9, y: 14.54))
        bezier4Path.addLine(to: CGPoint(x: 9, y: 10.46))
        bezier4Path.close()
        bezier4Path.usesEvenOddFillRule = true
        fillColor4.setFill()
        bezier4Path.fill()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 5.73, y: 12.27))
        bezier5Path.addLine(to: CGPoint(x: 3.17, y: 8.65))
        bezier5Path.addLine(to: CGPoint(x: 9, y: 10.46))
        bezier5Path.addLine(to: CGPoint(x: 5.73, y: 12.27))
        bezier5Path.close()
        bezier5Path.usesEvenOddFillRule = true
        fillColor5.setFill()
        bezier5Path.fill()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 12.27, y: 12.27))
        bezier6Path.addLine(to: CGPoint(x: 14.83, y: 8.65))
        bezier6Path.addLine(to: CGPoint(x: 9, y: 10.46))
        bezier6Path.addLine(to: CGPoint(x: 12.27, y: 12.27))
        bezier6Path.close()
        bezier6Path.usesEvenOddFillRule = true
        fillColor6.setFill()
        bezier6Path.fill()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: 9, y: 10.46))
        bezier7Path.addLine(to: CGPoint(x: 13.08, y: 3.34))
        bezier7Path.addLine(to: CGPoint(x: 14.83, y: 4.39))
        bezier7Path.addLine(to: CGPoint(x: 14.83, y: 8.65))
        bezier7Path.addLine(to: CGPoint(x: 9, y: 10.46))
        bezier7Path.close()
        bezier7Path.usesEvenOddFillRule = true
        fillColor4.setFill()
        bezier7Path.fill()


        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: 9, y: 10.46))
        bezier8Path.addLine(to: CGPoint(x: 4.92, y: 3.34))
        bezier8Path.addLine(to: CGPoint(x: 3.17, y: 4.39))
        bezier8Path.addLine(to: CGPoint(x: 3.17, y: 8.65))
        bezier8Path.addLine(to: CGPoint(x: 9, y: 10.46))
        bezier8Path.close()
        bezier8Path.usesEvenOddFillRule = true
        fillColor6.setFill()
        bezier8Path.fill()


        //// Bezier 9 Drawing
        let bezier9Path = UIBezierPath()
        bezier9Path.move(to: CGPoint(x: 9, y: 10.46))
        bezier9Path.addLine(to: CGPoint(x: 4.92, y: 3.34))
        bezier9Path.addLine(to: CGPoint(x: 9, y: 5.56))
        bezier9Path.addLine(to: CGPoint(x: 9, y: 10.46))
        bezier9Path.close()
        bezier9Path.usesEvenOddFillRule = true
        fillColor3.setFill()
        bezier9Path.fill()


        //// Bezier 10 Drawing
        let bezier10Path = UIBezierPath()
        bezier10Path.move(to: CGPoint(x: 9, y: 10.46))
        bezier10Path.addLine(to: CGPoint(x: 13.08, y: 3.34))
        bezier10Path.addLine(to: CGPoint(x: 9, y: 5.56))
        bezier10Path.addLine(to: CGPoint(x: 9, y: 10.46))
        bezier10Path.close()
        bezier10Path.usesEvenOddFillRule = true
        fillColor5.setFill()
        bezier10Path.fill()


        //// Bezier 11 Drawing
        let bezier11Path = UIBezierPath()
        bezier11Path.move(to: CGPoint(x: 7.02, y: 10.98))
        bezier11Path.addLine(to: CGPoint(x: 4.92, y: 8.07))
        bezier11Path.addLine(to: CGPoint(x: 4.92, y: 5.38))
        bezier11Path.addLine(to: CGPoint(x: 4.97, y: 5.38))
        bezier11Path.addLine(to: CGPoint(x: 9, y: 7.54))
        bezier11Path.addLine(to: CGPoint(x: 13.03, y: 5.38))
        bezier11Path.addLine(to: CGPoint(x: 13.08, y: 5.38))
        bezier11Path.addLine(to: CGPoint(x: 13.08, y: 8.07))
        bezier11Path.addLine(to: CGPoint(x: 10.98, y: 10.98))
        bezier11Path.addLine(to: CGPoint(x: 9, y: 12.44))
        bezier11Path.addLine(to: CGPoint(x: 7.02, y: 10.98))
        bezier11Path.close()
        bezier11Path.usesEvenOddFillRule = true
        fillColor3.setFill()
        bezier11Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawExperience(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)


        //// Color Declarations
        let fillColor3 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.500)
        let fillColor5 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.250)
        let fillColor10 = UIColor(red: 1.000, green: 0.651, blue: 0.137, alpha: 1.000)
        let fillColor11 = UIColor(red: 0.749, green: 0.490, blue: 0.102, alpha: 0.250)
        let fillColor12 = UIColor(red: 0.749, green: 0.490, blue: 0.102, alpha: 0.500)

        //// Star Drawing
        let starPath = UIBezierPath()
        starPath.move(to: CGPoint(x: 9, y: 0))
        starPath.addLine(to: CGPoint(x: 12.01, y: 5.99))
        starPath.addLine(to: CGPoint(x: 18, y: 9))
        starPath.addLine(to: CGPoint(x: 12.01, y: 12.01))
        starPath.addLine(to: CGPoint(x: 9, y: 18))
        starPath.addLine(to: CGPoint(x: 5.99, y: 12.01))
        starPath.addLine(to: CGPoint(x: 0, y: 9))
        starPath.addLine(to: CGPoint(x: 5.99, y: 5.99))
        starPath.close()
        fillColor10.setFill()
        starPath.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 3.38, y: 9))
        bezierPath.addLine(to: CGPoint(x: 7.12, y: 7.12))
        bezierPath.addLine(to: CGPoint(x: 9, y: 9))
        bezierPath.addLine(to: CGPoint(x: 3.38, y: 9))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor5.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 9, y: 14.62))
        bezier2Path.addLine(to: CGPoint(x: 7.12, y: 10.88))
        bezier2Path.addLine(to: CGPoint(x: 9, y: 9))
        bezier2Path.addLine(to: CGPoint(x: 9, y: 14.62))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        fillColor5.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 14.62, y: 9))
        bezier3Path.addLine(to: CGPoint(x: 10.88, y: 10.88))
        bezier3Path.addLine(to: CGPoint(x: 9, y: 9))
        bezier3Path.addLine(to: CGPoint(x: 14.62, y: 9))
        bezier3Path.close()
        bezier3Path.usesEvenOddFillRule = true
        fillColor5.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 9, y: 3.38))
        bezier4Path.addLine(to: CGPoint(x: 10.88, y: 7.12))
        bezier4Path.addLine(to: CGPoint(x: 9, y: 9))
        bezier4Path.addLine(to: CGPoint(x: 9, y: 3.38))
        bezier4Path.close()
        bezier4Path.usesEvenOddFillRule = true
        fillColor5.setFill()
        bezier4Path.fill()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 14.62, y: 9))
        bezier5Path.addLine(to: CGPoint(x: 10.88, y: 7.12))
        bezier5Path.addLine(to: CGPoint(x: 9, y: 9))
        bezier5Path.addLine(to: CGPoint(x: 14.62, y: 9))
        bezier5Path.close()
        bezier5Path.usesEvenOddFillRule = true
        fillColor11.setFill()
        bezier5Path.fill()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 9, y: 14.62))
        bezier6Path.addLine(to: CGPoint(x: 10.88, y: 10.88))
        bezier6Path.addLine(to: CGPoint(x: 9, y: 9))
        bezier6Path.addLine(to: CGPoint(x: 9, y: 14.62))
        bezier6Path.close()
        bezier6Path.usesEvenOddFillRule = true
        fillColor12.setFill()
        bezier6Path.fill()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: 3.38, y: 9))
        bezier7Path.addLine(to: CGPoint(x: 7.12, y: 10.88))
        bezier7Path.addLine(to: CGPoint(x: 9, y: 9))
        bezier7Path.addLine(to: CGPoint(x: 3.38, y: 9))
        bezier7Path.close()
        bezier7Path.usesEvenOddFillRule = true
        fillColor3.setFill()
        bezier7Path.fill()


        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: 9, y: 3.38))
        bezier8Path.addLine(to: CGPoint(x: 7.12, y: 7.12))
        bezier8Path.addLine(to: CGPoint(x: 9, y: 9))
        bezier8Path.addLine(to: CGPoint(x: 9, y: 3.38))
        bezier8Path.close()
        bezier8Path.usesEvenOddFillRule = true
        fillColor3.setFill()
        bezier8Path.fill()


        //// Star 2 Drawing
        let star2Path = UIBezierPath()
        star2Path.move(to: CGPoint(x: 9, y: 6.35))
        star2Path.addLine(to: CGPoint(x: 9.88, y: 8.12))
        star2Path.addLine(to: CGPoint(x: 11.65, y: 9))
        star2Path.addLine(to: CGPoint(x: 9.88, y: 9.88))
        star2Path.addLine(to: CGPoint(x: 9, y: 11.65))
        star2Path.addLine(to: CGPoint(x: 8.12, y: 9.88))
        star2Path.addLine(to: CGPoint(x: 6.35, y: 9))
        star2Path.addLine(to: CGPoint(x: 8.12, y: 8.12))
        star2Path.close()
        fillColor3.setFill()
        star2Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawMagic(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)


        //// Color Declarations
        let fillColor3 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.500)
        let fillColor5 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.250)
        let fillColor7 = UIColor(red: 0.161, green: 0.584, blue: 0.804, alpha: 1.000)
        let fillColor8 = UIColor(red: 0.314, green: 0.710, blue: 0.914, alpha: 1.000)
        let fillColor9 = UIColor(red: 0.122, green: 0.439, blue: 0.604, alpha: 0.250)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 16, y: 11.62))
        bezierPath.addLine(to: CGPoint(x: 9, y: 18))
        bezierPath.addLine(to: CGPoint(x: 2, y: 11.62))
        bezierPath.addLine(to: CGPoint(x: 9, y: 1))
        bezierPath.addLine(to: CGPoint(x: 16, y: 11.62))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor7.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 3.82, y: 11.41))
        bezier2Path.addLine(to: CGPoint(x: 9, y: 9.29))
        bezier2Path.addLine(to: CGPoint(x: 9, y: 16.09))
        bezier2Path.addLine(to: CGPoint(x: 3.82, y: 11.41))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        fillColor8.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 9, y: 9.29))
        bezier3Path.addLine(to: CGPoint(x: 14.18, y: 11.41))
        bezier3Path.addLine(to: CGPoint(x: 9, y: 16.09))
        bezier3Path.addLine(to: CGPoint(x: 9, y: 9.29))
        bezier3Path.close()
        bezier3Path.usesEvenOddFillRule = true
        fillColor9.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 9, y: 9.29))
        bezier4Path.addLine(to: CGPoint(x: 9, y: 3.55))
        bezier4Path.addLine(to: CGPoint(x: 14.18, y: 11.41))
        bezier4Path.addLine(to: CGPoint(x: 9, y: 9.29))
        bezier4Path.close()
        bezier4Path.usesEvenOddFillRule = true
        fillColor5.setFill()
        bezier4Path.fill()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 3.82, y: 11.41))
        bezier5Path.addLine(to: CGPoint(x: 9, y: 3.55))
        bezier5Path.addLine(to: CGPoint(x: 9, y: 9.29))
        bezier5Path.addLine(to: CGPoint(x: 3.82, y: 11.41))
        bezier5Path.close()
        bezier5Path.usesEvenOddFillRule = true
        fillColor3.setFill()
        bezier5Path.fill()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 5.64, y: 11.13))
        bezier6Path.addLine(to: CGPoint(x: 9, y: 6.1))
        bezier6Path.addLine(to: CGPoint(x: 12.36, y: 11.13))
        bezier6Path.addLine(to: CGPoint(x: 9, y: 14.18))
        bezier6Path.addLine(to: CGPoint(x: 5.64, y: 11.13))
        bezier6Path.close()
        bezier6Path.usesEvenOddFillRule = true
        fillColor3.setFill()
        bezier6Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawGold(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)


        //// Color Declarations
        let fillColor3 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.500)
        let fillColor5 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.250)
        let fillColor10 = UIColor(red: 1.000, green: 0.651, blue: 0.137, alpha: 1.000)
        let fillColor12 = UIColor(red: 0.749, green: 0.490, blue: 0.102, alpha: 0.500)
        let fillColor13 = UIColor(red: 0.749, green: 0.490, blue: 0.102, alpha: 0.750)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 9, y: 18))
        bezierPath.addCurve(to: CGPoint(x: 18, y: 9), controlPoint1: CGPoint(x: 13.97, y: 18), controlPoint2: CGPoint(x: 18, y: 13.97))
        bezierPath.addCurve(to: CGPoint(x: 9, y: 0), controlPoint1: CGPoint(x: 18, y: 4.03), controlPoint2: CGPoint(x: 13.97, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 9), controlPoint1: CGPoint(x: 4.03, y: 0), controlPoint2: CGPoint(x: 0, y: 4.03))
        bezierPath.addCurve(to: CGPoint(x: 9, y: 18), controlPoint1: CGPoint(x: 0, y: 13.97), controlPoint2: CGPoint(x: 4.03, y: 18))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor10.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 4.73, y: 13.27))
        bezier2Path.addCurve(to: CGPoint(x: 4.73, y: 4.8), controlPoint1: CGPoint(x: 2.4, y: 10.95), controlPoint2: CGPoint(x: 2.4, y: 7.13))
        bezier2Path.addCurve(to: CGPoint(x: 13.2, y: 4.8), controlPoint1: CGPoint(x: 7.05, y: 2.48), controlPoint2: CGPoint(x: 10.88, y: 2.48))
        bezier2Path.usesEvenOddFillRule = true
        fillColor3.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 13.28, y: 4.72))
        bezier3Path.addCurve(to: CGPoint(x: 13.28, y: 13.2), controlPoint1: CGPoint(x: 15.6, y: 7.05), controlPoint2: CGPoint(x: 15.6, y: 10.87))
        bezier3Path.addCurve(to: CGPoint(x: 4.8, y: 13.2), controlPoint1: CGPoint(x: 10.95, y: 15.52), controlPoint2: CGPoint(x: 7.12, y: 15.52))
        bezier3Path.usesEvenOddFillRule = true
        fillColor5.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 9, y: 1.5))
        bezier4Path.addCurve(to: CGPoint(x: 1.5, y: 9), controlPoint1: CGPoint(x: 4.88, y: 1.5), controlPoint2: CGPoint(x: 1.5, y: 4.88))
        bezier4Path.addCurve(to: CGPoint(x: 9, y: 16.5), controlPoint1: CGPoint(x: 1.5, y: 13.12), controlPoint2: CGPoint(x: 4.88, y: 16.5))
        bezier4Path.addCurve(to: CGPoint(x: 16.5, y: 9), controlPoint1: CGPoint(x: 13.12, y: 16.5), controlPoint2: CGPoint(x: 16.5, y: 13.12))
        bezier4Path.addCurve(to: CGPoint(x: 9, y: 1.5), controlPoint1: CGPoint(x: 16.5, y: 4.88), controlPoint2: CGPoint(x: 13.12, y: 1.5))
        bezier4Path.addLine(to: CGPoint(x: 9, y: 1.5))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 9, y: 15))
        bezier4Path.addCurve(to: CGPoint(x: 3, y: 9), controlPoint1: CGPoint(x: 5.7, y: 15), controlPoint2: CGPoint(x: 3, y: 12.3))
        bezier4Path.addCurve(to: CGPoint(x: 9, y: 3), controlPoint1: CGPoint(x: 3, y: 5.7), controlPoint2: CGPoint(x: 5.7, y: 3))
        bezier4Path.addCurve(to: CGPoint(x: 15, y: 9), controlPoint1: CGPoint(x: 12.3, y: 3), controlPoint2: CGPoint(x: 15, y: 5.7))
        bezier4Path.addCurve(to: CGPoint(x: 9, y: 15), controlPoint1: CGPoint(x: 15, y: 12.3), controlPoint2: CGPoint(x: 12.3, y: 15))
        bezier4Path.addLine(to: CGPoint(x: 9, y: 15))
        bezier4Path.close()
        bezier4Path.usesEvenOddFillRule = true
        fillColor12.setFill()
        bezier4Path.fill()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 9.75, y: 6.75))
        bezier5Path.addLine(to: CGPoint(x: 9.75, y: 8.25))
        bezier5Path.addLine(to: CGPoint(x: 8.25, y: 8.25))
        bezier5Path.addLine(to: CGPoint(x: 8.25, y: 6.75))
        bezier5Path.addLine(to: CGPoint(x: 6.75, y: 6.75))
        bezier5Path.addLine(to: CGPoint(x: 6.75, y: 11.25))
        bezier5Path.addLine(to: CGPoint(x: 8.25, y: 11.25))
        bezier5Path.addLine(to: CGPoint(x: 8.25, y: 9.75))
        bezier5Path.addLine(to: CGPoint(x: 9.75, y: 9.75))
        bezier5Path.addLine(to: CGPoint(x: 9.75, y: 11.25))
        bezier5Path.addLine(to: CGPoint(x: 11.25, y: 11.25))
        bezier5Path.addLine(to: CGPoint(x: 11.25, y: 6.75))
        bezier5Path.addLine(to: CGPoint(x: 9.75, y: 6.75))
        bezier5Path.close()
        bezier5Path.usesEvenOddFillRule = true
        fillColor13.setFill()
        bezier5Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawGem(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)


        //// Color Declarations
        let fillColor3 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.500)
        let fillColor5 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.250)
        let fillColor14 = UIColor(red: 0.141, green: 0.800, blue: 0.561, alpha: 1.000)
        let fillColor15 = UIColor(red: 0.106, green: 0.600, blue: 0.420, alpha: 0.350)

        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0, y: 6.75))
        bezierPath.addLine(to: CGPoint(x: 3.75, y: 1.5))
        bezierPath.addLine(to: CGPoint(x: 14.25, y: 1.5))
        bezierPath.addLine(to: CGPoint(x: 18, y: 6.75))
        bezierPath.addLine(to: CGPoint(x: 9, y: 16.5))
        bezierPath.addLine(to: CGPoint(x: 0, y: 6.75))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor14.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 5.25, y: 6.6))
        bezier2Path.addLine(to: CGPoint(x: 4.5, y: 3))
        bezier2Path.addLine(to: CGPoint(x: 9, y: 3))
        bezier2Path.addLine(to: CGPoint(x: 5.25, y: 6.6))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        fillColor5.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 12.75, y: 6.6))
        bezier3Path.addLine(to: CGPoint(x: 13.5, y: 3))
        bezier3Path.addLine(to: CGPoint(x: 9, y: 3))
        bezier3Path.addLine(to: CGPoint(x: 12.75, y: 6.6))
        bezier3Path.close()
        bezier3Path.usesEvenOddFillRule = true
        fillColor5.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 5.25, y: 6.6))
        bezier4Path.addLine(to: CGPoint(x: 9, y: 3))
        bezier4Path.addLine(to: CGPoint(x: 12.75, y: 6.6))
        bezier4Path.addLine(to: CGPoint(x: 5.25, y: 6.6))
        bezier4Path.close()
        bezier4Path.usesEvenOddFillRule = true
        fillColor3.setFill()
        bezier4Path.fill()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 1.95, y: 6.6))
        bezier5Path.addLine(to: CGPoint(x: 4.5, y: 3))
        bezier5Path.addLine(to: CGPoint(x: 5.25, y: 6.6))
        bezier5Path.addLine(to: CGPoint(x: 1.95, y: 6.6))
        bezier5Path.close()
        bezier5Path.usesEvenOddFillRule = true
        fillColor3.setFill()
        bezier5Path.fill()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 16.05, y: 6.6))
        bezier6Path.addLine(to: CGPoint(x: 13.5, y: 3))
        bezier6Path.addLine(to: CGPoint(x: 12.75, y: 6.6))
        bezier6Path.addLine(to: CGPoint(x: 16.05, y: 6.6))
        bezier6Path.close()
        bezier6Path.usesEvenOddFillRule = true
        fillColor15.setFill()
        bezier6Path.fill()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: 1.95, y: 6.6))
        bezier7Path.addLine(to: CGPoint(x: 5.25, y: 6.6))
        bezier7Path.addLine(to: CGPoint(x: 9, y: 14.32))
        bezier7Path.addLine(to: CGPoint(x: 1.95, y: 6.6))
        bezier7Path.close()
        bezier7Path.usesEvenOddFillRule = true
        fillColor15.setFill()
        bezier7Path.fill()


        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: 16.05, y: 6.6))
        bezier8Path.addLine(to: CGPoint(x: 12.75, y: 6.6))
        bezier8Path.addLine(to: CGPoint(x: 9, y: 14.32))
        bezier8Path.addLine(to: CGPoint(x: 16.05, y: 6.6))
        bezier8Path.close()
        bezier8Path.usesEvenOddFillRule = true
        fillColor3.setFill()
        bezier8Path.fill()


        //// Bezier 9 Drawing
        let bezier9Path = UIBezierPath()
        bezier9Path.move(to: CGPoint(x: 5.25, y: 6.6))
        bezier9Path.addLine(to: CGPoint(x: 12.75, y: 6.6))
        bezier9Path.addLine(to: CGPoint(x: 9, y: 14.32))
        bezier9Path.addLine(to: CGPoint(x: 5.25, y: 6.6))
        bezier9Path.close()
        bezier9Path.usesEvenOddFillRule = true
        fillColor5.setFill()
        bezier9Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawHourglass(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)


        //// Color Declarations
        let fillColor16 = UIColor(red: 0.663, green: 0.863, blue: 0.965, alpha: 0.800)
        let fillColor17 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.900)
        let fillColor18 = UIColor(red: 0.604, green: 0.384, blue: 1.000, alpha: 1.000)
        let fillColor19 = UIColor(red: 0.310, green: 0.165, blue: 0.576, alpha: 1.000)

        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 3, y: 14.35))
        bezierPath.addLine(to: CGPoint(x: 3, y: 16.37))
        bezierPath.addCurve(to: CGPoint(x: 3.3, y: 16.97), controlPoint1: CGPoint(x: 3, y: 16.61), controlPoint2: CGPoint(x: 3.11, y: 16.83))
        bezierPath.addCurve(to: CGPoint(x: 13.27, y: 16.97), controlPoint1: CGPoint(x: 5.39, y: 18.51), controlPoint2: CGPoint(x: 11.18, y: 18.51))
        bezierPath.addCurve(to: CGPoint(x: 13.57, y: 16.37), controlPoint1: CGPoint(x: 13.46, y: 16.83), controlPoint2: CGPoint(x: 13.57, y: 16.61))
        bezierPath.addLine(to: CGPoint(x: 13.57, y: 14.35))
        bezierPath.addCurve(to: CGPoint(x: 11.19, y: 9.68), controlPoint1: CGPoint(x: 13.57, y: 12.5), controlPoint2: CGPoint(x: 12.62, y: 10.73))
        bezierPath.addCurve(to: CGPoint(x: 11.19, y: 8.45), controlPoint1: CGPoint(x: 10.77, y: 9.37), controlPoint2: CGPoint(x: 10.77, y: 8.75))
        bezierPath.addCurve(to: CGPoint(x: 13.57, y: 3.78), controlPoint1: CGPoint(x: 12.62, y: 7.39), controlPoint2: CGPoint(x: 13.57, y: 5.62))
        bezierPath.addLine(to: CGPoint(x: 13.57, y: 1.75))
        bezierPath.addCurve(to: CGPoint(x: 13.27, y: 1.15), controlPoint1: CGPoint(x: 13.57, y: 1.52), controlPoint2: CGPoint(x: 13.46, y: 1.29))
        bezierPath.addCurve(to: CGPoint(x: 3.3, y: 1.15), controlPoint1: CGPoint(x: 11.18, y: -0.38), controlPoint2: CGPoint(x: 5.39, y: -0.38))
        bezierPath.addCurve(to: CGPoint(x: 3, y: 1.75), controlPoint1: CGPoint(x: 3.11, y: 1.29), controlPoint2: CGPoint(x: 3, y: 1.52))
        bezierPath.addLine(to: CGPoint(x: 3, y: 3.78))
        bezierPath.addCurve(to: CGPoint(x: 5.38, y: 8.45), controlPoint1: CGPoint(x: 3, y: 5.62), controlPoint2: CGPoint(x: 3.95, y: 7.39))
        bezierPath.addCurve(to: CGPoint(x: 5.38, y: 9.68), controlPoint1: CGPoint(x: 5.8, y: 8.75), controlPoint2: CGPoint(x: 5.8, y: 9.37))
        bezierPath.addCurve(to: CGPoint(x: 3, y: 14.35), controlPoint1: CGPoint(x: 3.95, y: 10.73), controlPoint2: CGPoint(x: 3, y: 12.5))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor16.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 8.29, y: 1.51))
        bezier2Path.addCurve(to: CGPoint(x: 12.06, y: 2.18), controlPoint1: CGPoint(x: 10, y: 1.51), controlPoint2: CGPoint(x: 11.34, y: 1.82))
        bezier2Path.addLine(to: CGPoint(x: 12.06, y: 3.77))
        bezier2Path.addCurve(to: CGPoint(x: 10.3, y: 7.23), controlPoint1: CGPoint(x: 12.06, y: 5.1), controlPoint2: CGPoint(x: 11.38, y: 6.43))
        bezier2Path.addCurve(to: CGPoint(x: 9.37, y: 9.06), controlPoint1: CGPoint(x: 9.71, y: 7.66), controlPoint2: CGPoint(x: 9.37, y: 8.34))
        bezier2Path.addCurve(to: CGPoint(x: 10.29, y: 10.89), controlPoint1: CGPoint(x: 9.37, y: 9.78), controlPoint2: CGPoint(x: 9.71, y: 10.46))
        bezier2Path.addCurve(to: CGPoint(x: 12.06, y: 14.35), controlPoint1: CGPoint(x: 11.38, y: 11.69), controlPoint2: CGPoint(x: 12.06, y: 13.02))
        bezier2Path.addLine(to: CGPoint(x: 12.06, y: 15.94))
        bezier2Path.addCurve(to: CGPoint(x: 8.29, y: 16.61), controlPoint1: CGPoint(x: 11.34, y: 16.3), controlPoint2: CGPoint(x: 10, y: 16.61))
        bezier2Path.addCurve(to: CGPoint(x: 4.51, y: 15.94), controlPoint1: CGPoint(x: 6.57, y: 16.61), controlPoint2: CGPoint(x: 5.23, y: 16.3))
        bezier2Path.addLine(to: CGPoint(x: 4.51, y: 14.35))
        bezier2Path.addCurve(to: CGPoint(x: 6.28, y: 10.89), controlPoint1: CGPoint(x: 4.51, y: 13.02), controlPoint2: CGPoint(x: 5.19, y: 11.69))
        bezier2Path.addCurve(to: CGPoint(x: 7.21, y: 9.06), controlPoint1: CGPoint(x: 6.86, y: 10.46), controlPoint2: CGPoint(x: 7.21, y: 9.78))
        bezier2Path.addCurve(to: CGPoint(x: 6.28, y: 7.23), controlPoint1: CGPoint(x: 7.21, y: 8.34), controlPoint2: CGPoint(x: 6.86, y: 7.66))
        bezier2Path.addCurve(to: CGPoint(x: 4.51, y: 3.77), controlPoint1: CGPoint(x: 5.19, y: 6.43), controlPoint2: CGPoint(x: 4.51, y: 5.1))
        bezier2Path.addLine(to: CGPoint(x: 4.51, y: 2.18))
        bezier2Path.addCurve(to: CGPoint(x: 8.29, y: 1.51), controlPoint1: CGPoint(x: 5.23, y: 1.82), controlPoint2: CGPoint(x: 6.57, y: 1.51))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        fillColor17.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 8.46, y: 2.64))
        bezier3Path.addCurve(to: CGPoint(x: 5.79, y: 3.08), controlPoint1: CGPoint(x: 7.17, y: 2.64), controlPoint2: CGPoint(x: 5.81, y: 2.76))
        bezier3Path.addCurve(to: CGPoint(x: 6.83, y: 4.37), controlPoint1: CGPoint(x: 5.78, y: 3.34), controlPoint2: CGPoint(x: 5.79, y: 3.84))
        bezier3Path.addCurve(to: CGPoint(x: 8.59, y: 5.83), controlPoint1: CGPoint(x: 7.85, y: 4.88), controlPoint2: CGPoint(x: 8.04, y: 5.83))
        bezier3Path.addCurve(to: CGPoint(x: 10.05, y: 4.75), controlPoint1: CGPoint(x: 9.23, y: 5.83), controlPoint2: CGPoint(x: 9.27, y: 5.28))
        bezier3Path.addCurve(to: CGPoint(x: 10.98, y: 3.14), controlPoint1: CGPoint(x: 10.86, y: 4.19), controlPoint2: CGPoint(x: 10.99, y: 3.44))
        bezier3Path.addCurve(to: CGPoint(x: 8.46, y: 2.64), controlPoint1: CGPoint(x: 10.97, y: 2.73), controlPoint2: CGPoint(x: 9.75, y: 2.64))
        bezier3Path.close()
        bezier3Path.usesEvenOddFillRule = true
        fillColor18.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 10.05, y: 4.75))
        bezier4Path.addCurve(to: CGPoint(x: 10.98, y: 3.14), controlPoint1: CGPoint(x: 10.86, y: 4.19), controlPoint2: CGPoint(x: 10.99, y: 3.44))
        bezier4Path.addCurve(to: CGPoint(x: 9.24, y: 2.66), controlPoint1: CGPoint(x: 10.97, y: 2.82), controlPoint2: CGPoint(x: 10.2, y: 2.7))
        bezier4Path.addCurve(to: CGPoint(x: 9.78, y: 3.66), controlPoint1: CGPoint(x: 9.51, y: 2.8), controlPoint2: CGPoint(x: 9.86, y: 3.09))
        bezier4Path.addCurve(to: CGPoint(x: 8.9, y: 5.44), controlPoint1: CGPoint(x: 9.69, y: 4.26), controlPoint2: CGPoint(x: 8.75, y: 4.92))
        bezier4Path.addCurve(to: CGPoint(x: 9.04, y: 5.7), controlPoint1: CGPoint(x: 8.93, y: 5.55), controlPoint2: CGPoint(x: 8.98, y: 5.63))
        bezier4Path.addCurve(to: CGPoint(x: 10.05, y: 4.75), controlPoint1: CGPoint(x: 9.32, y: 5.5), controlPoint2: CGPoint(x: 9.51, y: 5.12))
        bezier4Path.close()
        bezier4Path.usesEvenOddFillRule = true
        fillColor19.setFill()
        bezier4Path.fill()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 8.29, y: 10.44))
        bezier5Path.addCurve(to: CGPoint(x: 7.22, y: 11.59), controlPoint1: CGPoint(x: 7.89, y: 10.44), controlPoint2: CGPoint(x: 7.79, y: 11.15))
        bezier5Path.addCurve(to: CGPoint(x: 5.68, y: 13.77), controlPoint1: CGPoint(x: 6.53, y: 12.14), controlPoint2: CGPoint(x: 5.86, y: 12.81))
        bezier5Path.addCurve(to: CGPoint(x: 5.85, y: 14.72), controlPoint1: CGPoint(x: 5.53, y: 14.57), controlPoint2: CGPoint(x: 5.67, y: 14.67))
        bezier5Path.addCurve(to: CGPoint(x: 8.79, y: 14.72), controlPoint1: CGPoint(x: 6.03, y: 14.78), controlPoint2: CGPoint(x: 7.43, y: 15.01))
        bezier5Path.addCurve(to: CGPoint(x: 10.79, y: 13.33), controlPoint1: CGPoint(x: 10.16, y: 14.43), controlPoint2: CGPoint(x: 10.92, y: 13.88))
        bezier5Path.addCurve(to: CGPoint(x: 9.58, y: 11.82), controlPoint1: CGPoint(x: 10.66, y: 12.79), controlPoint2: CGPoint(x: 10.28, y: 12.34))
        bezier5Path.addCurve(to: CGPoint(x: 8.29, y: 10.44), controlPoint1: CGPoint(x: 8.9, y: 11.32), controlPoint2: CGPoint(x: 8.68, y: 10.44))
        bezier5Path.close()
        bezier5Path.usesEvenOddFillRule = true
        fillColor18.setFill()
        bezier5Path.fill()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 5.85, y: 14.72))
        bezier6Path.addCurve(to: CGPoint(x: 8.79, y: 14.72), controlPoint1: CGPoint(x: 6.03, y: 14.78), controlPoint2: CGPoint(x: 7.43, y: 15.01))
        bezier6Path.addCurve(to: CGPoint(x: 10.76, y: 13.66), controlPoint1: CGPoint(x: 9.88, y: 14.49), controlPoint2: CGPoint(x: 10.59, y: 14.1))
        bezier6Path.addCurve(to: CGPoint(x: 10.76, y: 13.64), controlPoint1: CGPoint(x: 10.76, y: 13.66), controlPoint2: CGPoint(x: 10.76, y: 13.65))
        bezier6Path.addCurve(to: CGPoint(x: 8.11, y: 13.4), controlPoint1: CGPoint(x: 10.68, y: 13.35), controlPoint2: CGPoint(x: 9.53, y: 13.17))
        bezier6Path.addCurve(to: CGPoint(x: 5.66, y: 14.57), controlPoint1: CGPoint(x: 6.75, y: 13.62), controlPoint2: CGPoint(x: 5.65, y: 14.07))
        bezier6Path.addCurve(to: CGPoint(x: 5.85, y: 14.72), controlPoint1: CGPoint(x: 5.7, y: 14.67), controlPoint2: CGPoint(x: 5.77, y: 14.7))
        bezier6Path.close()
        bezier6Path.usesEvenOddFillRule = true
        fillColor19.setFill()
        bezier6Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawExperienceReward(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 40), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 40)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 40, height: 40)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        HabiticaIcons.drawExperience(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawGoldReward(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 40), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 40)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 40, height: 40)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        HabiticaIcons.drawGold(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawHeartDarkBg(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 18, height: 18)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        HabiticaIcons.drawHeart(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, darkBackground: true)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawHeartLightBg(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 18, height: 18), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 18, height: 18), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 18, y: resizedFrame.height / 18)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 18, height: 18)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        HabiticaIcons.drawHeart(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, darkBackground: false)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawWarrior(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 25, height: 25), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 25, height: 25), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 25, y: resizedFrame.height / 25)


        //// Color Declarations
        let fillColor = UIColor(red: 0.941, green: 0.380, blue: 0.400, alpha: 1.000)
        let fillColor20 = UIColor(red: 0.784, green: 0.169, blue: 0.169, alpha: 1.000)
        let fillColor21 = UIColor(red: 1.000, green: 0.714, blue: 0.722, alpha: 1.000)
        let fillColor22 = UIColor(red: 0.949, green: 0.482, blue: 0.525, alpha: 1.000)
        let fillColor23 = UIColor(red: 0.898, green: 0.255, blue: 0.302, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 9.58, y: 15.5))
        bezierPath.addLine(to: CGPoint(x: 12.88, y: 17.02))
        bezierPath.addCurve(to: CGPoint(x: 13.4, y: 17.7), controlPoint1: CGPoint(x: 13.15, y: 17.15), controlPoint2: CGPoint(x: 13.33, y: 17.4))
        bezierPath.addCurve(to: CGPoint(x: 13.89, y: 19.95), controlPoint1: CGPoint(x: 13.51, y: 18.19), controlPoint2: CGPoint(x: 13.86, y: 19.34))
        bezierPath.addCurve(to: CGPoint(x: 13.24, y: 20.39), controlPoint1: CGPoint(x: 13.9, y: 20.29), controlPoint2: CGPoint(x: 13.55, y: 20.53))
        bezierPath.addLine(to: CGPoint(x: 7.73, y: 17.75))
        bezierPath.addCurve(to: CGPoint(x: 7.33, y: 17.35), controlPoint1: CGPoint(x: 7.56, y: 17.66), controlPoint2: CGPoint(x: 7.42, y: 17.52))
        bezierPath.addLine(to: CGPoint(x: 4.69, y: 11.84))
        bezierPath.addCurve(to: CGPoint(x: 5.13, y: 11.19), controlPoint1: CGPoint(x: 4.55, y: 11.53), controlPoint2: CGPoint(x: 4.79, y: 11.18))
        bezierPath.addCurve(to: CGPoint(x: 7.38, y: 11.68), controlPoint1: CGPoint(x: 5.74, y: 11.22), controlPoint2: CGPoint(x: 6.86, y: 11.55))
        bezierPath.addCurve(to: CGPoint(x: 8.06, y: 12.2), controlPoint1: CGPoint(x: 7.67, y: 11.76), controlPoint2: CGPoint(x: 7.93, y: 11.93))
        bezierPath.addLine(to: CGPoint(x: 9.58, y: 15.5))
        bezierPath.close()
        bezierPath.usesEvenOddFillRule = true
        fillColor.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 1.6, y: 23.48))
        bezier2Path.addLine(to: CGPoint(x: 3.02, y: 24.91))
        bezier2Path.addLine(to: CGPoint(x: 6.71, y: 24.61))
        bezier2Path.addLine(to: CGPoint(x: 6.9, y: 22.19))
        bezier2Path.addLine(to: CGPoint(x: 9.02, y: 20.07))
        bezier2Path.addLine(to: CGPoint(x: 12.88, y: 21.91))
        bezier2Path.addLine(to: CGPoint(x: 15.76, y: 21.13))
        bezier2Path.addLine(to: CGPoint(x: 14.55, y: 15.93))
        bezier2Path.addLine(to: CGPoint(x: 22.63, y: 8.39))
        bezier2Path.addLine(to: CGPoint(x: 24.18, y: 0.91))
        bezier2Path.addLine(to: CGPoint(x: 24.17, y: 0.91))
        bezier2Path.addLine(to: CGPoint(x: 24.18, y: 0.91))
        bezier2Path.addLine(to: CGPoint(x: 24.18, y: 0.9))
        bezier2Path.addLine(to: CGPoint(x: 16.7, y: 2.45))
        bezier2Path.addLine(to: CGPoint(x: 9.16, y: 10.53))
        bezier2Path.addLine(to: CGPoint(x: 3.95, y: 9.32))
        bezier2Path.addLine(to: CGPoint(x: 3.18, y: 12.2))
        bezier2Path.addLine(to: CGPoint(x: 5.01, y: 16.06))
        bezier2Path.addLine(to: CGPoint(x: 2.89, y: 18.18))
        bezier2Path.addLine(to: CGPoint(x: 0.47, y: 18.37))
        bezier2Path.addLine(to: CGPoint(x: 0.18, y: 22.06))
        bezier2Path.addLine(to: CGPoint(x: 1.6, y: 23.48))
        bezier2Path.addLine(to: CGPoint(x: 1.6, y: 23.48))
        bezier2Path.close()
        bezier2Path.usesEvenOddFillRule = true
        fillColor20.setFill()
        bezier2Path.fill()


        //// Rectangle Drawing
        context.saveGState()
        context.translateBy(x: 6, y: 19.05)
        context.rotate(by: 45 * CGFloat.pi/180)

        let rectanglePath = UIBezierPath(rect: CGRect(x: -1.3, y: -3.23, width: 2.6, height: 6.45))
        fillColor.setFill()
        rectanglePath.fill()

        context.restoreGState()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 1.76, y: 21.47))
        bezier3Path.addLine(to: CGPoint(x: 1.89, y: 19.79))
        bezier3Path.addLine(to: CGPoint(x: 3.58, y: 19.66))
        bezier3Path.addLine(to: CGPoint(x: 5.42, y: 21.5))
        bezier3Path.addLine(to: CGPoint(x: 5.29, y: 23.19))
        bezier3Path.addLine(to: CGPoint(x: 3.61, y: 23.32))
        bezier3Path.addLine(to: CGPoint(x: 1.76, y: 21.47))
        bezier3Path.close()
        bezier3Path.usesEvenOddFillRule = true
        fillColor.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 17.67, y: 3.92))
        bezier4Path.addLine(to: CGPoint(x: 17.83, y: 7.25))
        bezier4Path.addLine(to: CGPoint(x: 22.05, y: 3.03))
        bezier4Path.addCurve(to: CGPoint(x: 17.67, y: 3.92), controlPoint1: CGPoint(x: 21.98, y: 2.95), controlPoint2: CGPoint(x: 18.79, y: 3.32))
        bezier4Path.close()
        bezier4Path.usesEvenOddFillRule = true
        fillColor21.setFill()
        bezier4Path.fill()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 17.6, y: 3.96))
        bezier5Path.addLine(to: CGPoint(x: 8.68, y: 13.32))
        bezier5Path.addLine(to: CGPoint(x: 10.96, y: 14.12))
        bezier5Path.addLine(to: CGPoint(x: 17.83, y: 7.25))
        bezier5Path.addLine(to: CGPoint(x: 17.67, y: 3.92))
        bezier5Path.addCurve(to: CGPoint(x: 17.6, y: 3.96), controlPoint1: CGPoint(x: 17.65, y: 3.93), controlPoint2: CGPoint(x: 17.6, y: 3.96))
        bezier5Path.close()
        bezier5Path.usesEvenOddFillRule = true
        fillColor22.setFill()
        bezier5Path.fill()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 8.68, y: 13.32))
        bezier6Path.addCurve(to: CGPoint(x: 8.6, y: 13.4), controlPoint1: CGPoint(x: 8.65, y: 13.34), controlPoint2: CGPoint(x: 8.62, y: 13.37))
        bezier6Path.addLine(to: CGPoint(x: 9.57, y: 15.51))
        bezier6Path.addLine(to: CGPoint(x: 10.96, y: 14.12))
        bezier6Path.addLine(to: CGPoint(x: 8.68, y: 13.32))
        bezier6Path.close()
        bezier6Path.usesEvenOddFillRule = true
        fillColor22.setFill()
        bezier6Path.fill()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: 21.16, y: 7.41))
        bezier7Path.addLine(to: CGPoint(x: 17.83, y: 7.25))
        bezier7Path.addLine(to: CGPoint(x: 22.05, y: 3.03))
        bezier7Path.addCurve(to: CGPoint(x: 21.16, y: 7.41), controlPoint1: CGPoint(x: 22.13, y: 3.11), controlPoint2: CGPoint(x: 21.76, y: 6.29))
        bezier7Path.close()
        bezier7Path.usesEvenOddFillRule = true
        fillColor22.setFill()
        bezier7Path.fill()


        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: 21.12, y: 7.48))
        bezier8Path.addLine(to: CGPoint(x: 11.76, y: 16.4))
        bezier8Path.addLine(to: CGPoint(x: 10.96, y: 14.12))
        bezier8Path.addLine(to: CGPoint(x: 17.83, y: 7.25))
        bezier8Path.addLine(to: CGPoint(x: 21.16, y: 7.41))
        bezier8Path.addCurve(to: CGPoint(x: 21.12, y: 7.48), controlPoint1: CGPoint(x: 21.14, y: 7.43), controlPoint2: CGPoint(x: 21.12, y: 7.48))
        bezier8Path.close()
        bezier8Path.usesEvenOddFillRule = true
        fillColor23.setFill()
        bezier8Path.fill()


        //// Bezier 9 Drawing
        let bezier9Path = UIBezierPath()
        bezier9Path.move(to: CGPoint(x: 11.76, y: 16.4))
        bezier9Path.addCurve(to: CGPoint(x: 11.68, y: 16.48), controlPoint1: CGPoint(x: 11.73, y: 16.43), controlPoint2: CGPoint(x: 11.7, y: 16.46))
        bezier9Path.addLine(to: CGPoint(x: 9.57, y: 15.51))
        bezier9Path.addLine(to: CGPoint(x: 10.96, y: 14.12))
        bezier9Path.addLine(to: CGPoint(x: 11.76, y: 16.4))
        bezier9Path.close()
        bezier9Path.usesEvenOddFillRule = true
        fillColor23.setFill()
        bezier9Path.fill()


        //// Bezier 10 Drawing
        let bezier10Path = UIBezierPath()
        bezier10Path.move(to: CGPoint(x: 3.58, y: 19.66))
        bezier10Path.addLine(to: CGPoint(x: 3.19, y: 21.09))
        bezier10Path.addLine(to: CGPoint(x: 1.89, y: 19.79))
        bezier10Path.addLine(to: CGPoint(x: 3.58, y: 19.66))
        bezier10Path.close()
        bezier10Path.usesEvenOddFillRule = true
        fillColor21.setFill()
        bezier10Path.fill()


        //// Bezier 11 Drawing
        let bezier11Path = UIBezierPath()
        bezier11Path.move(to: CGPoint(x: 5.42, y: 21.5))
        bezier11Path.addLine(to: CGPoint(x: 3.99, y: 21.89))
        bezier11Path.addLine(to: CGPoint(x: 5.29, y: 23.19))
        bezier11Path.addLine(to: CGPoint(x: 5.42, y: 21.5))
        bezier11Path.close()
        bezier11Path.usesEvenOddFillRule = true
        fillColor21.setFill()
        bezier11Path.fill()


        //// Bezier 12 Drawing
        let bezier12Path = UIBezierPath()
        bezier12Path.move(to: CGPoint(x: 3.58, y: 19.66))
        bezier12Path.addLine(to: CGPoint(x: 5.42, y: 21.5))
        bezier12Path.addLine(to: CGPoint(x: 3.99, y: 21.89))
        bezier12Path.addLine(to: CGPoint(x: 3.19, y: 21.09))
        bezier12Path.addLine(to: CGPoint(x: 3.58, y: 19.66))
        bezier12Path.close()
        bezier12Path.usesEvenOddFillRule = true
        fillColor21.setFill()
        bezier12Path.fill()


        //// Bezier 13 Drawing
        let bezier13Path = UIBezierPath()
        bezier13Path.move(to: CGPoint(x: 1.76, y: 21.48))
        bezier13Path.addLine(to: CGPoint(x: 3.19, y: 21.09))
        bezier13Path.addLine(to: CGPoint(x: 1.89, y: 19.79))
        bezier13Path.addLine(to: CGPoint(x: 1.76, y: 21.48))
        bezier13Path.close()
        bezier13Path.usesEvenOddFillRule = true
        fillColor22.setFill()
        bezier13Path.fill()


        //// Bezier 14 Drawing
        let bezier14Path = UIBezierPath()
        bezier14Path.move(to: CGPoint(x: 3.6, y: 23.32))
        bezier14Path.addLine(to: CGPoint(x: 3.99, y: 21.89))
        bezier14Path.addLine(to: CGPoint(x: 5.29, y: 23.19))
        bezier14Path.addLine(to: CGPoint(x: 3.6, y: 23.32))
        bezier14Path.close()
        bezier14Path.usesEvenOddFillRule = true
        fillColor22.setFill()
        bezier14Path.fill()


        //// Bezier 15 Drawing
        let bezier15Path = UIBezierPath()
        bezier15Path.move(to: CGPoint(x: 1.76, y: 21.48))
        bezier15Path.addLine(to: CGPoint(x: 3.61, y: 23.32))
        bezier15Path.addLine(to: CGPoint(x: 3.99, y: 21.89))
        bezier15Path.addLine(to: CGPoint(x: 3.19, y: 21.09))
        bezier15Path.addLine(to: CGPoint(x: 1.76, y: 21.48))
        bezier15Path.close()
        bezier15Path.usesEvenOddFillRule = true
        fillColor22.setFill()
        bezier15Path.fill()


        //// Rectangle 2 Drawing
        context.saveGState()
        context.translateBy(x: 7.3, y: 17.8)
        context.rotate(by: 45 * CGFloat.pi/180)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: -1.3, y: -0.8, width: 2.6, height: 1.6))
        fillColor23.setFill()
        rectangle2Path.fill()

        context.restoreGState()


        //// Rectangle 3 Drawing
        context.saveGState()
        context.translateBy(x: 6.15, y: 18.9)
        context.rotate(by: 45 * CGFloat.pi/180)

        let rectangle3Path = UIBezierPath(rect: CGRect(x: -1.3, y: -0.8, width: 2.6, height: 1.6))
        fillColor.setFill()
        rectangle3Path.fill()

        context.restoreGState()


        //// Rectangle 4 Drawing
        context.saveGState()
        context.translateBy(x: 5.05, y: 20)
        context.rotate(by: 45 * CGFloat.pi/180)

        let rectangle4Path = UIBezierPath(rect: CGRect(x: -1.3, y: -0.8, width: 2.6, height: 1.6))
        fillColor23.setFill()
        rectangle4Path.fill()

        context.restoreGState()


        //// Bezier 16 Drawing
        let bezier16Path = UIBezierPath()
        bezier16Path.move(to: CGPoint(x: 9.58, y: 15.5))
        bezier16Path.addLine(to: CGPoint(x: 8.06, y: 12.2))
        bezier16Path.addCurve(to: CGPoint(x: 7.82, y: 11.9), controlPoint1: CGPoint(x: 8, y: 12.08), controlPoint2: CGPoint(x: 7.92, y: 11.98))
        bezier16Path.addCurve(to: CGPoint(x: 7.38, y: 11.68), controlPoint1: CGPoint(x: 7.7, y: 11.8), controlPoint2: CGPoint(x: 7.55, y: 11.72))
        bezier16Path.addCurve(to: CGPoint(x: 5.13, y: 11.2), controlPoint1: CGPoint(x: 6.87, y: 11.55), controlPoint2: CGPoint(x: 5.74, y: 11.22))
        bezier16Path.addCurve(to: CGPoint(x: 4.75, y: 11.37), controlPoint1: CGPoint(x: 4.97, y: 11.19), controlPoint2: CGPoint(x: 4.84, y: 11.26))
        bezier16Path.addLine(to: CGPoint(x: 6.97, y: 13.26))
        bezier16Path.addLine(to: CGPoint(x: 8.6, y: 16.49))
        bezier16Path.addLine(to: CGPoint(x: 9.58, y: 15.5))
        bezier16Path.addLine(to: CGPoint(x: 9.58, y: 15.5))
        bezier16Path.close()
        bezier16Path.usesEvenOddFillRule = true
        fillColor21.setFill()
        bezier16Path.fill()


        //// Bezier 17 Drawing
        let bezier17Path = UIBezierPath()
        bezier17Path.move(to: CGPoint(x: 6.97, y: 13.26))
        bezier17Path.addLine(to: CGPoint(x: 4.75, y: 11.37))
        bezier17Path.addCurve(to: CGPoint(x: 4.69, y: 11.84), controlPoint1: CGPoint(x: 4.65, y: 11.5), controlPoint2: CGPoint(x: 4.61, y: 11.67))
        bezier17Path.addLine(to: CGPoint(x: 7.33, y: 17.36))
        bezier17Path.addCurve(to: CGPoint(x: 7.5, y: 17.59), controlPoint1: CGPoint(x: 7.37, y: 17.44), controlPoint2: CGPoint(x: 7.43, y: 17.52))
        bezier17Path.addLine(to: CGPoint(x: 8.6, y: 16.49))
        bezier17Path.addLine(to: CGPoint(x: 6.97, y: 13.26))
        bezier17Path.close()
        bezier17Path.usesEvenOddFillRule = true
        fillColor.setFill()
        bezier17Path.fill()


        //// Bezier 18 Drawing
        let bezier18Path = UIBezierPath()
        bezier18Path.move(to: CGPoint(x: 13.89, y: 19.95))
        bezier18Path.addCurve(to: CGPoint(x: 13.4, y: 17.7), controlPoint1: CGPoint(x: 13.86, y: 19.34), controlPoint2: CGPoint(x: 13.54, y: 18.22))
        bezier18Path.addCurve(to: CGPoint(x: 13.18, y: 17.26), controlPoint1: CGPoint(x: 13.36, y: 17.54), controlPoint2: CGPoint(x: 13.29, y: 17.39))
        bezier18Path.addCurve(to: CGPoint(x: 12.88, y: 17.02), controlPoint1: CGPoint(x: 13.1, y: 17.16), controlPoint2: CGPoint(x: 13.01, y: 17.08))
        bezier18Path.addLine(to: CGPoint(x: 9.59, y: 15.5))
        bezier18Path.addLine(to: CGPoint(x: 9.58, y: 15.5))
        bezier18Path.addLine(to: CGPoint(x: 8.6, y: 16.49))
        bezier18Path.addLine(to: CGPoint(x: 11.82, y: 18.12))
        bezier18Path.addLine(to: CGPoint(x: 13.72, y: 20.33))
        bezier18Path.addCurve(to: CGPoint(x: 13.89, y: 19.95), controlPoint1: CGPoint(x: 13.83, y: 20.25), controlPoint2: CGPoint(x: 13.9, y: 20.11))
        bezier18Path.close()
        bezier18Path.usesEvenOddFillRule = true
        fillColor22.setFill()
        bezier18Path.fill()


        //// Bezier 19 Drawing
        let bezier19Path = UIBezierPath()
        bezier19Path.move(to: CGPoint(x: 11.82, y: 18.12))
        bezier19Path.addLine(to: CGPoint(x: 13.72, y: 20.33))
        bezier19Path.addCurve(to: CGPoint(x: 13.25, y: 20.39), controlPoint1: CGPoint(x: 13.59, y: 20.43), controlPoint2: CGPoint(x: 13.41, y: 20.47))
        bezier19Path.addLine(to: CGPoint(x: 7.73, y: 17.75))
        bezier19Path.addCurve(to: CGPoint(x: 7.5, y: 17.58), controlPoint1: CGPoint(x: 7.65, y: 17.71), controlPoint2: CGPoint(x: 7.57, y: 17.65))
        bezier19Path.addLine(to: CGPoint(x: 8.6, y: 16.49))
        bezier19Path.addLine(to: CGPoint(x: 11.82, y: 18.12))
        bezier19Path.close()
        bezier19Path.usesEvenOddFillRule = true
        fillColor23.setFill()
        bezier19Path.fill()


        //// Group
        context.saveGState()
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.move(to: CGPoint(x: 16.35, y: 5.27))
        clipPath.addLine(to: CGPoint(x: 12.81, y: 8.98))
        clipPath.addLine(to: CGPoint(x: 12.81, y: 12.27))
        clipPath.addLine(to: CGPoint(x: 16.35, y: 8.73))
        clipPath.addLine(to: CGPoint(x: 16.35, y: 5.27))
        clipPath.addLine(to: CGPoint(x: 16.35, y: 5.27))
        clipPath.close()
        clipPath.usesEvenOddFillRule = true
        clipPath.addClip()


        //// Bezier 20 Drawing
        let bezier20Path = UIBezierPath()
        bezier20Path.move(to: CGPoint(x: 15.86, y: 12.61))
        bezier20Path.addLine(to: CGPoint(x: 15.35, y: 12.65))
        bezier20Path.addCurve(to: CGPoint(x: 15.35, y: 5), controlPoint1: CGPoint(x: 15.35, y: 12.65), controlPoint2: CGPoint(x: 15.35, y: 7.56))
        bezier20Path.addLine(to: CGPoint(x: 15.86, y: 5))
        bezier20Path.addCurve(to: CGPoint(x: 15.86, y: 12.65), controlPoint1: CGPoint(x: 15.86, y: 7.56), controlPoint2: CGPoint(x: 15.86, y: 12.65))
        bezier20Path.addLine(to: CGPoint(x: 15.86, y: 12.61))
        bezier20Path.close()
        fillColor21.setFill()
        bezier20Path.fill()


        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(rect: CGRect(x: 12.8, y: 5.87, width: 1.5, height: 7.15))
        fillColor21.setFill()
        rectangle5Path.fill()


        context.endTransparencyLayer()
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawHeartLarge(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 36, height: 36), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 36, height: 36), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 36, y: resizedFrame.height / 36)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 36, height: 36)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        HabiticaIcons.drawHeart(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, darkBackground: false)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawDifficultyStars(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 48, height: 12), resizing: ResizingBehavior = .aspectFit, difficulty: CGFloat = 2.5) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 48, height: 12), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 48, y: resizedFrame.height / 12)



        //// Variable Declarations
        let _1StarDifficulty: CGFloat = difficulty >= 1 ? 1 : (difficulty >= 0.5 ? 0.5 : 0)
        let _2StarDifficulty: CGFloat = difficulty >= 2 ? 1 : (difficulty >= 1.5 ? 0.5 : 0)
        let _3StarDifficulty: CGFloat = difficulty >= 3 ? 1 : (difficulty >= 2.5 ? 0.5 : 0)
        let _4StarDifficulty: CGFloat = difficulty >= 4 ? 1 : (difficulty >= 3.5 ? 0.5 : 0)

        //// Symbol Drawing
        let symbolRect = CGRect(x: 0, y: 0, width: 12, height: 12)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        HabiticaIcons.drawDifficultyStar(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, singleDifficulty: _1StarDifficulty)
        context.restoreGState()


        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 12, y: 0, width: 12, height: 12)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        HabiticaIcons.drawDifficultyStar(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch, singleDifficulty: _2StarDifficulty)
        context.restoreGState()


        //// Symbol 3 Drawing
        let symbol3Rect = CGRect(x: 24, y: 0, width: 12, height: 12)
        context.saveGState()
        context.clip(to: symbol3Rect)
        context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

        HabiticaIcons.drawDifficultyStar(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch, singleDifficulty: _3StarDifficulty)
        context.restoreGState()


        //// Symbol 4 Drawing
        let symbol4Rect = CGRect(x: 36, y: 0, width: 12, height: 12)
        context.saveGState()
        context.clip(to: symbol4Rect)
        context.translateBy(x: symbol4Rect.minX, y: symbol4Rect.minY)

        HabiticaIcons.drawDifficultyStar(frame: CGRect(origin: .zero, size: symbol4Rect.size), resizing: .stretch, singleDifficulty: _4StarDifficulty)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawDifficultyStar(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 12, height: 12), resizing: ResizingBehavior = .aspectFit, singleDifficulty: CGFloat = 0) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 12, height: 12), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 12, y: resizedFrame.height / 12)


        //// Color Declarations
        let fillColor24 = UIColor(red: 1.000, green: 0.651, blue: 0.141, alpha: 1.000)
        let fillColor25 = UIColor(red: 0.882, green: 0.878, blue: 0.890, alpha: 1.000)

        //// Variable Declarations
        let isFull = singleDifficulty == 1
        let isHalf = singleDifficulty == 0.5

        //// Star 3 Drawing
        let star3Path = UIBezierPath()
        star3Path.move(to: CGPoint(x: 6, y: 0))
        star3Path.addLine(to: CGPoint(x: 8.02, y: 3.98))
        star3Path.addLine(to: CGPoint(x: 12, y: 6))
        star3Path.addLine(to: CGPoint(x: 8.02, y: 8.02))
        star3Path.addLine(to: CGPoint(x: 6, y: 12))
        star3Path.addLine(to: CGPoint(x: 3.98, y: 8.02))
        star3Path.addLine(to: CGPoint(x: 0, y: 6))
        star3Path.addLine(to: CGPoint(x: 3.98, y: 3.98))
        star3Path.close()
        fillColor25.setFill()
        star3Path.fill()


        if (isFull) {
            //// Star Drawing
            let starPath = UIBezierPath()
            starPath.move(to: CGPoint(x: 6, y: 0))
            starPath.addLine(to: CGPoint(x: 8.02, y: 3.98))
            starPath.addLine(to: CGPoint(x: 12, y: 6))
            starPath.addLine(to: CGPoint(x: 8.02, y: 8.02))
            starPath.addLine(to: CGPoint(x: 6, y: 12))
            starPath.addLine(to: CGPoint(x: 3.98, y: 8.02))
            starPath.addLine(to: CGPoint(x: 0, y: 6))
            starPath.addLine(to: CGPoint(x: 3.98, y: 3.98))
            starPath.close()
            fillColor24.setFill()
            starPath.fill()
        }


        if (isHalf) {
            //// Bezier Drawing
            let bezierPath = UIBezierPath()
            bezierPath.move(to: CGPoint(x: 6, y: 0))
            bezierPath.addLine(to: CGPoint(x: 4, y: 4))
            bezierPath.addLine(to: CGPoint(x: 0, y: 6))
            bezierPath.addLine(to: CGPoint(x: 4, y: 8))
            bezierPath.addLine(to: CGPoint(x: 6, y: 12))
            bezierPath.addLine(to: CGPoint(x: 6, y: 0))
            bezierPath.close()
            bezierPath.usesEvenOddFillRule = true
            fillColor24.setFill()
            bezierPath.fill()
        }
        
        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic public class var imageOfExperience: UIImage {
        if Cache.imageOfExperience != nil {
            return Cache.imageOfExperience!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 18, height: 18), false, 0)
            HabiticaIcons.drawExperience()

        Cache.imageOfExperience = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfExperience!
    }

    @objc dynamic public class var imageOfMagic: UIImage {
        if Cache.imageOfMagic != nil {
            return Cache.imageOfMagic!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 18, height: 18), false, 0)
            HabiticaIcons.drawMagic()

        Cache.imageOfMagic = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfMagic!
    }

    @objc dynamic public class var imageOfGold: UIImage {
        if Cache.imageOfGold != nil {
            return Cache.imageOfGold!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 18, height: 18), false, 0)
            HabiticaIcons.drawGold()

        Cache.imageOfGold = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfGold!
    }

    @objc dynamic public class var imageOfGem: UIImage {
        if Cache.imageOfGem != nil {
            return Cache.imageOfGem!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 18, height: 18), false, 0)
            HabiticaIcons.drawGem()

        Cache.imageOfGem = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfGem!
    }

    @objc dynamic public class var imageOfHourglass: UIImage {
        if Cache.imageOfHourglass != nil {
            return Cache.imageOfHourglass!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 18, height: 18), false, 0)
            HabiticaIcons.drawHourglass()

        Cache.imageOfHourglass = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfHourglass!
    }

    @objc dynamic public class var imageOfExperienceReward: UIImage {
        if Cache.imageOfExperienceReward != nil {
            return Cache.imageOfExperienceReward!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 40), false, 0)
            HabiticaIcons.drawExperienceReward()

        Cache.imageOfExperienceReward = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfExperienceReward!
    }

    @objc dynamic public class var imageOfGoldReward: UIImage {
        if Cache.imageOfGoldReward != nil {
            return Cache.imageOfGoldReward!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 40), false, 0)
            HabiticaIcons.drawGoldReward()

        Cache.imageOfGoldReward = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfGoldReward!
    }

    @objc dynamic public class var imageOfHeartDarkBg: UIImage {
        if Cache.imageOfHeartDarkBg != nil {
            return Cache.imageOfHeartDarkBg!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 18, height: 18), false, 0)
            HabiticaIcons.drawHeartDarkBg()

        Cache.imageOfHeartDarkBg = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfHeartDarkBg!
    }

    @objc dynamic public class var imageOfHeartLightBg: UIImage {
        if Cache.imageOfHeartLightBg != nil {
            return Cache.imageOfHeartLightBg!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 18, height: 18), false, 0)
            HabiticaIcons.drawHeartLightBg()

        Cache.imageOfHeartLightBg = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfHeartLightBg!
    }

    @objc dynamic public class var imageOfWarrior: UIImage {
        if Cache.imageOfWarrior != nil {
            return Cache.imageOfWarrior!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 25, height: 25), false, 0)
            HabiticaIcons.drawWarrior()

        Cache.imageOfWarrior = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfWarrior!
    }

    @objc dynamic public class var imageOfHeartLarge: UIImage {
        if Cache.imageOfHeartLarge != nil {
            return Cache.imageOfHeartLarge!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 36, height: 36), false, 0)
            HabiticaIcons.drawHeartLarge()

        Cache.imageOfHeartLarge = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfHeartLarge!
    }

    @objc dynamic public class func imageOfDifficultyStars(difficulty: CGFloat = 2.5) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 48, height: 12), false, 0)
            HabiticaIcons.drawDifficultyStars(difficulty: difficulty)

        let imageOfDifficultyStars = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfDifficultyStars
    }

    //// Customization Infrastructure

    @objc @IBOutlet dynamic var experienceTargets: [AnyObject]! {
        get { return Cache.experienceTargets }
        set {
            Cache.experienceTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfExperience)
            }
        }
    }

    @objc @IBOutlet dynamic var magicTargets: [AnyObject]! {
        get { return Cache.magicTargets }
        set {
            Cache.magicTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfMagic)
            }
        }
    }

    @objc @IBOutlet dynamic var goldTargets: [AnyObject]! {
        get { return Cache.goldTargets }
        set {
            Cache.goldTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfGold)
            }
        }
    }

    @objc @IBOutlet dynamic var gemTargets: [AnyObject]! {
        get { return Cache.gemTargets }
        set {
            Cache.gemTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfGem)
            }
        }
    }

    @objc @IBOutlet dynamic var hourglassTargets: [AnyObject]! {
        get { return Cache.hourglassTargets }
        set {
            Cache.hourglassTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfHourglass)
            }
        }
    }

    @objc @IBOutlet dynamic var experienceRewardTargets: [AnyObject]! {
        get { return Cache.experienceRewardTargets }
        set {
            Cache.experienceRewardTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfExperienceReward)
            }
        }
    }

    @objc @IBOutlet dynamic var goldRewardTargets: [AnyObject]! {
        get { return Cache.goldRewardTargets }
        set {
            Cache.goldRewardTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfGoldReward)
            }
        }
    }

    @objc @IBOutlet dynamic var heartDarkBgTargets: [AnyObject]! {
        get { return Cache.heartDarkBgTargets }
        set {
            Cache.heartDarkBgTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfHeartDarkBg)
            }
        }
    }

    @objc @IBOutlet dynamic var heartLightBgTargets: [AnyObject]! {
        get { return Cache.heartLightBgTargets }
        set {
            Cache.heartLightBgTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfHeartLightBg)
            }
        }
    }

    @objc @IBOutlet dynamic var warriorTargets: [AnyObject]! {
        get { return Cache.warriorTargets }
        set {
            Cache.warriorTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfWarrior)
            }
        }
    }

    @objc @IBOutlet dynamic var heartLargeTargets: [AnyObject]! {
        get { return Cache.heartLargeTargets }
        set {
            Cache.heartLargeTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: HabiticaIcons.imageOfHeartLarge)
            }
        }
    }




    @objc(HabiticaIconsResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
